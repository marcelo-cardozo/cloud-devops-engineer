Description:
    Udagram Server Stack

Parameters:
    EnvironmentName:
        Description: Environment prefixed to each resource
        Type: String
    ScalingMinServers:
        Description: Environment prefixed to each resource
        Type: Number
        Default: '1'
    ScalingMaxServers:
        Description: Environment prefixed to each resource
        Type: Number
        Default: '4'

Resources:
    LBSecGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: Allow http to our load balancer
            VpcId:
                Fn::ImportValue:
                  !Sub "${EnvironmentName}-VPCID"
            SecurityGroupIngress:
                -   IpProtocol: tcp
                    FromPort: 80
                    ToPort: 80
                    CidrIp: 0.0.0.0/0
            SecurityGroupEgress:
                -   IpProtocol: tcp
                    FromPort: 80
                    ToPort: 80
                    CidrIp: 0.0.0.0/0
    WebServerSecGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: Allow http to our hosts and SSH from local only
            VpcId:
                Fn::ImportValue:
                  !Sub "${EnvironmentName}-VPCID"
            SecurityGroupIngress:
                -   IpProtocol: tcp
                    FromPort: 80
                    ToPort: 80
                    CidrIp: 0.0.0.0/0
                -   IpProtocol: tcp
                    FromPort: 22
                    ToPort: 22
                    CidrIp: 0.0.0.0/0
            SecurityGroupEgress:
                -   IpProtocol: tcp
                    FromPort: 0
                    ToPort: 65535
                    CidrIp: 0.0.0.0/0

    WebAppLaunchConfig:
        Type: AWS::AutoScaling::LaunchConfiguration
        Properties:
            UserData:
                Fn::Base64: !Sub
                    -  |
                        #!/bin/bash
                        # Install docker
                        export DEBIAN_FRONTEND=noninteractive
                        apt-get update
                        apt-get install -y apt-transport-https ca-certificates curl software-properties-common
                        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
                        add-apt-repository \
                        "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
                        $(lsb_release -cs) \
                        stable"
                        apt-get update
                        apt-get install -y docker-ce
                        usermod -aG docker ubuntu

                        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
                        sudo apt install unzip
                        unzip awscliv2.zip
                        sudo ./aws/install

                        s3Bucket=${S3Bucket}
                        aws s3 cp s3://"$s3Bucket"/app.zip .
                        unzip app.zip

                        docker run -p 80:80 -v "$PWD/app":/usr/local/apache2/htdocs/ httpd:2.4

                    - S3Bucket:
                          Fn::ImportValue:
                            !Sub "${EnvironmentName}-BUCKET"
            ImageId: ami-005bdb005fb00e791
            IamInstanceProfile: !Ref ServerProfile
            SecurityGroups:
                -   Ref: WebServerSecGroup
            InstanceType: t2.micro

    WebAppGroup:
        Type: AWS::AutoScaling::AutoScalingGroup
        Properties:
            VPCZoneIdentifier:
                -   Fn::ImportValue:
                      !Sub "${EnvironmentName}-PRIV-NETS"
            LaunchConfigurationName:
                Ref: WebAppLaunchConfig
            MinSize: !Ref ScalingMinServers
            MaxSize: !Ref ScalingMaxServers
            TargetGroupARNs:
                -   Ref: WebAppTargetGroup

    WebAppLB:
        Type: AWS::ElasticLoadBalancingV2::LoadBalancer
        Properties:
            Subnets:
                -   Fn::ImportValue: !Sub "${EnvironmentName}-PUB1-SN"
                -   Fn::ImportValue: !Sub "${EnvironmentName}-PUB2-SN"
            SecurityGroups:
                -   Ref: LBSecGroup
    Listener:
        Type: AWS::ElasticLoadBalancingV2::Listener
        Properties:
            DefaultActions:
                -   Type: forward
                    TargetGroupArn:
                        Ref: WebAppTargetGroup
            LoadBalancerArn:
                Ref: WebAppLB
            Port: 80
            Protocol: HTTP
    ALBListenerRule:
        Type: AWS::ElasticLoadBalancingV2::ListenerRule
        Properties:
            Actions:
                -   Type: forward
                    TargetGroupArn: !Ref 'WebAppTargetGroup'
            Conditions:
                -   Field: path-pattern
                    Values: [/]
            ListenerArn: !Ref 'Listener'
            Priority: 1
    WebAppTargetGroup:
        Type: AWS::ElasticLoadBalancingV2::TargetGroup
        Properties:
            HealthCheckIntervalSeconds: 10
            HealthCheckPath: /
            HealthCheckProtocol: HTTP
            HealthCheckTimeoutSeconds: 8
            HealthyThresholdCount: 2
            Port: 80
            Protocol: HTTP
            UnhealthyThresholdCount: 5
            VpcId:
                Fn::ImportValue:
                    Fn::Sub: "${EnvironmentName}-VPCID"

    ServerRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    -   Effect: "Allow"
                        Principal:
                            Service:
                                - "ec2.amazonaws.com"
                        Action:
                            - "sts:AssumeRole"
            Path: /
            RoleName: ServerRole

    ServerBucketPolicy:
        Type: AWS::IAM::Policy
        Properties:
            PolicyName: ServerBucketPolicy
            PolicyDocument:
                Statement:
                    -   Effect: Allow
                        Action:
                            - s3:Get*
                            - s3:List*
                        Resource:
                            - !Sub
                                - "arn:aws:s3:::${Bucket}"
                                -   Bucket:
                                        Fn::ImportValue:
                                            Fn::Sub: "${EnvironmentName}-BUCKET"
                            - !Sub
                                - "arn:aws:s3:::${Bucket}/*"
                                - Bucket:
                                    Fn::ImportValue:
                                        Fn::Sub: "${EnvironmentName}-BUCKET"
            Roles:
                -   Ref: ServerRole

    ServerProfile:
        Type: AWS::IAM::InstanceProfile
        Properties:
            Path: /
            Roles:
                - !Ref ServerRole

Outputs:
    LBUrl:
        Description: Url path of the Load Balancer
        Value: !Sub
            - "http://${LBUrl}"
            - LBUrl: !GetAtt WebAppLB.DNSName
        Export:
            Name: !Sub ${EnvironmentName}-LBURL